export FP_FLOW_DIR :=$(realpath $(shell dirname $(realpath $(lastword $(MAKEFILE_LIST)))))

##==============================================================================
##  ___ _                   _             _____                  _      
## | __| |___  ___ _ _ _ __| |__ _ _ _   |_   _|_ _ _ _ __ _ ___| |_ ___
## | _|| / _ \/ _ \ '_| '_ \ / _` | ' \    | |/ _` | '_/ _` / -_)  _(_-<
## |_| |_\___/\___/_| | .__/_\__,_|_||_|   |_|\__,_|_| \__, \___|\__/__/
##                    |_|                              |___/            
##==============================================================================

export FP_RUN_DIR ?=$(BUILD_DIR)/floorplan

# Can (should?) be overridden by the designs configuration file.

# Specify margin, util and aspect ratio
FP_ASPECT_RATIO ?=
FP_UTILIZATION  ?=
FP_CORE_SPACE   ?=

# -OR-

# Specify die and core area
FP_DIE_AREA  ?=
FP_CORE_AREA ?=

#=======================================
# FP
#=======================================

fp: fp.final
	@## Alias to run all floorplan steps.
	@##     0. fp.setup
	@##     1. fp.v2def
	@##     2. fp.io
	@##     3. fp.global
	@##     4. fp.macro
	@##     5. fp.pdn
	@##     6. fp.final

#=======================================
# SETUP
#=======================================

fp.setup: synth.final
	@## Prepare for floorplaning.
	mkdir -p $(FP_RUN_DIR)/{logs,results,reports}
	ln -nsf $(OPENROAD)/share/replace/PORT9.dat $(FP_RUN_DIR)/PORT9.dat
	ln -nsf $(OPENROAD)/share/replace/POST9.dat $(FP_RUN_DIR)/POST9.dat
	ln -nsf $(OPENROAD)/share/replace/POWV9.dat $(FP_RUN_DIR)/POWV9.dat
	touch $(BUILD_VPATH)/$@

#=======================================
# V2DEF
#=======================================

export FP_V2DEF_IN_V    := $(SYNTH_FINAL_OUT_V)
export FP_V2DEF_IN_SDC  := $(SYNTH_FINAL_OUT_SDC)
export FP_V2DEF_OUT_V   := $(FP_RUN_DIR)/results/fp.v2def.v
export FP_V2DEF_OUT_SDC := $(FP_RUN_DIR)/results/fp.v2def.sdc
export FP_V2DEF_OUT_DEF := $(FP_RUN_DIR)/results/fp.v2def.def 

ifneq ($(FP_UTILIZATION),)
    FP_V2DEF_INIT_FP_ARGS :=-utilization $(FP_UTILIZATION)
    FP_V2DEF_INIT_FP_ARGS +=-aspect_ratio $(FP_ASPECT_RATIO)
    FP_V2DEF_INIT_FP_ARGS +=-core_space $(FP_CORE_SPACE)
else
    FP_V2DEF_INIT_FP_ARGS :=-die_area "$(FP_DIE_AREA)"
    FP_V2DEF_INIT_FP_ARGS +=-core_area "$(FP_CORE_AREA)"
endif

fp.v2def: fp.setup
	@## Convert the synthesized netlist to a def file.
	cd $(FP_RUN_DIR) && \
		(time verilog2def \
			-liberty $(LIB_FILE) \
			-lef $(LEF_FILE) \
			-verilog $(FP_V2DEF_IN_V) \
			-top_module $(DESIGN_NAME) \
			-units 2000 \
			-site $(PLACE_SITE) \
			-tracks $(TRACKS_INFO_FILE) \
			-def $(FP_V2DEF_OUT_DEF) \
			$(FP_V2DEF_INIT_FP_ARGS) \
		) 2>&1 | tee -i logs/$@.log
	sed -i 's/VERSION 5.5/VERSION 5.6/' $(FP_V2DEF_OUT_DEF)
	cp $(FP_V2DEF_IN_V) $(FP_V2DEF_OUT_V)
	cp $(FP_V2DEF_IN_SDC) $(FP_V2DEF_OUT_SDC)
	! grep --color -i "^error" $(FP_RUN_DIR)/logs/$@.log
	touch $(BUILD_VPATH)/$@

#=======================================
# IO
#=======================================

export FP_IO_IN_V    := $(FP_V2DEF_OUT_V)
export FP_IO_IN_SDC  := $(FP_V2DEF_OUT_SDC)
export FP_IO_IN_DEF  := $(FP_V2DEF_OUT_DEF)
export FP_IO_OUT_V   := $(FP_RUN_DIR)/results/fp.io.v
export FP_IO_OUT_SDC := $(FP_RUN_DIR)/results/fp.io.sdc
export FP_IO_OUT_DEF := $(FP_RUN_DIR)/results/fp.io.def

fp.io: fp.v2def
	@## Place io and top-level ports.
	cd $(FP_RUN_DIR) && \
		(time ioPlacer \
			--input-lef $(LEF_FILE) \
			--input-def $(FP_IO_IN_DEF) \
			--output $(FP_IO_OUT_DEF) \
			--hmetal 5 \
			--vmetal 6 \
			--random 2 \
			--wirelen 1 \
		) 2>&1 | tee -i logs/$@.log
	cp $(FP_IO_IN_V) $(FP_IO_OUT_V)
	cp $(FP_IO_IN_SDC) $(FP_IO_OUT_SDC)
	! grep --color -i "^error" $(FP_RUN_DIR)/logs/$@.log
	touch $(BUILD_VPATH)/$@

#=======================================
# GLOBAL
#=======================================

export FP_GLOBAL_IN_V    := $(FP_IO_OUT_V)
export FP_GLOBAL_IN_SDC  := $(FP_IO_OUT_SDC)
export FP_GLOBAL_IN_DEF  := $(FP_IO_OUT_DEF)
export FP_GLOBAL_OUT_V   := $(FP_RUN_DIR)/results/fp.global.v
export FP_GLOBAL_OUT_SDC := $(FP_RUN_DIR)/results/fp.global.sdc
export FP_GLOBAL_OUT_DEF := $(FP_RUN_DIR)/results/fp.global.def

fp.global: fp.io
	@## Time-driven global coarse placement.
	cd $(FP_RUN_DIR) && \
		(time RePlAce \
			-lef $(LEF_FILE) \
			-def $(FP_GLOBAL_IN_DEF) \
			-verilog $(FP_GLOBAL_IN_V) \
			-lib $(LIB_FILE) \
			-sdc $(FP_GLOBAL_IN_SDC) \
			-resPerMicron $(RES_PER_MICRON) \
			-capPerMicron $(CAP_PER_MICRON) \
			-output results/td-ms-replace \
			-bmflag etc \
			-t 1 \
			-experi output \
			-den 0.7 \
			-timing \
			-skipIP \
			-plot \
			-onlyGP \
		) 2>&1 | tee -i logs/$@.log 
	cp $(FP_RUN_DIR)/results/td-ms-replace/etc/fp.io/output/fp.io_final.def $(FP_GLOBAL_OUT_DEF)
	cp $(FP_GLOBAL_IN_V) $(FP_GLOBAL_OUT_V)
	cp $(FP_GLOBAL_IN_SDC) $(FP_GLOBAL_OUT_SDC)
	! grep --color -i "^error" $(FP_RUN_DIR)/logs/$@.log
	touch $(BUILD_VPATH)/$@

#=======================================
# MACRO
#=======================================

# Can (should?) be overridden by the designs configuration file.
FP_MACRO_SKIP ?=true

export FP_MACRO_IN_V    := $(FP_GLOBAL_OUT_V)
export FP_MACRO_IN_SDC  := $(FP_GLOBAL_OUT_SDC)
export FP_MACRO_IN_DEF  := $(FP_GLOBAL_OUT_DEF)
export FP_MACRO_OUT_V   := $(FP_RUN_DIR)/results/fp.macro.v
export FP_MACRO_OUT_SDC := $(FP_RUN_DIR)/results/fp.macro.sdc
export FP_MACRO_OUT_DEF := $(FP_RUN_DIR)/results/fp.macro.def

ifeq ($(FP_MACRO_SKIP),true)

fp.macro: fp.global
	@# Intentionally left undocumented
	cp $(FP_MACRO_IN_DEF) $(FP_MACRO_OUT_DEF)
	cp $(FP_MACRO_IN_V) $(FP_MACRO_OUT_V)
	cp $(FP_MACRO_IN_SDC) $(FP_MACRO_OUT_SDC)
	touch $(BUILD_VPATH)/$@

else

fp.macro: fp.global
	@## Perform hard macro placement.
	cd $(FP_RUN_DIR) && \
		(time fplan \
			-lib $(LIB_FILE) \
			-verilog $(FP_MACRO_IN_V) \
			-lef $(LEF_FILE) \
			-def $(FP_MACRO_IN_DEF) \
			-design $(DESIGN_NAME) \
			-sdc $(FP_MACRO_IN_SDC) \
			-output $(DESIGN_NAME) \
			-globalConfig $(FP_FLOW_DIR)/scripts/ip_global.cfg \
			-depth 3 \
			-plot \
		) 2>&1 | tee -i logs/$@.log
	mv $(FP_RUN_DIR)/$(DESIGN_NAME)_best.def $(FP_MACRO_OUT_DEF)
	cp $(FP_MACRO_IN_V) $(FP_MACRO_OUT_V)
	cp $(FP_MACRO_IN_SDC) $(FP_MACRO_OUT_SDC)
	! grep --color -i "^error" $(FP_RUN_DIR)/logs/$@.log
	touch $(BUILD_VPATH)/$@

endif

#=======================================
# PDN
#=======================================

# TODO: Create or find a PDN configuration file.

# Can (should?) be overridden by the designs configuration file.
FP_PDN_SKIP ?=true

export FP_PDN_IN_V    := $(FP_MACRO_OUT_V)
export FP_PDN_IN_SDC  := $(FP_MACRO_OUT_SDC)
export FP_PDN_IN_DEF  := $(FP_MACRO_OUT_DEF)
export FP_PDN_OUT_V   := $(FP_RUN_DIR)/results/fp.pdn.v
export FP_PDN_OUT_SDC := $(FP_RUN_DIR)/results/fp.pdn.sdc
export FP_PDN_OUT_DEF := $(FP_RUN_DIR)/results/fp.pdn.def

ifeq ($(FP_PDN_SKIP),true)

fp.pdn: fp.macro
	@# Intentionally left undocumented
	cp $(FP_PDN_IN_DEF) $(FP_PDN_OUT_DEF)
	cp $(FP_PDN_IN_V) $(FP_PDN_OUT_V)
	cp $(FP_PDN_IN_SDC) $(FP_PDN_OUT_SDC)
	touch $(BUILD_VPATH)/$@

else

fp.pdn: fp.macro
	@## Synthesize the power delivery network.
	cp $(FP_FLOW_DIR)/scripts/pdn.cfg $(FP_RUN_DIR)/pdn.cfg
	$(eval export DIE_URX  :=$(shell echo "`cat $(FP_PDN_IN_DEF) | grep "^DIEAREA" | awk '{print $$7}'`/2000" | bc -l))
	$(eval export DIE_URY  :=$(shell echo "`cat $(FP_PDN_IN_DEF) | grep "^DIEAREA" | awk '{print $$8}'`/2000" | bc -l))
	$(eval export CORE_URX :=$(shell echo "$(DIE_URX)-$(FP_CORE_SPACE)" | bc -l))
	$(eval export CORE_URY :=$(shell echo "$(DIE_URY)-$(FP_CORE_SPACE)" | bc -l))
	sed -i "s/<DESIGN>/$(DESIGN_NAME)/g" $(FP_RUN_DIR)/pdn.cfg
	sed -i "s/<IN_DEF>/$(subst /,\/,$(FP_PDN_IN_DEF))/g" $(FP_RUN_DIR)/pdn.cfg
	sed -i "s/<LEF>/$(subst /,\/,$(LEF_FILE))/g" $(FP_RUN_DIR)/pdn.cfg
	sed -i "s/<CORE_LLX>/$(FP_CORE_SPACE)/g" $(FP_RUN_DIR)/pdn.cfg
	sed -i "s/<CORE_LLY>/$(FP_CORE_SPACE)/g" $(FP_RUN_DIR)/pdn.cfg
	sed -i "s/<CORE_URX>/$(CORE_URX)/g" $(FP_RUN_DIR)/pdn.cfg
	sed -i "s/<CORE_URY>/$(CORE_URY)/g" $(FP_RUN_DIR)/pdn.cfg
	sed -i "s/<DIE_LLX>/0/g" $(FP_RUN_DIR)/pdn.cfg
	sed -i "s/<DIE_LLY>/0/g" $(FP_RUN_DIR)/pdn.cfg
	sed -i "s/<DIE_URX>/$(DIE_URX)/g" $(FP_RUN_DIR)/pdn.cfg
	sed -i "s/<DIE_URY>/$(DIE_URY)/g" $(FP_RUN_DIR)/pdn.cfg
	cd $(FP_RUN_DIR) && (time apply_pdn pdn.cfg) 2>&1 | tee -i logs/$@.log
	mv $(DESIGN_NAME)_post_T8.def $(FP_PDN_OUT_DEF)
	cp $(FP_PDN_IN_V) $(FP_PDN_OUT_V)
	cp $(FP_PDN_IN_SDC) $(FP_PDN_OUT_SDC)
	! grep --color -i "^error" $(FP_RUN_DIR)/logs/$@.log
	touch $(BUILD_VPATH)/$@

endif

#=======================================
# FINAL
#=======================================

FP_FINAL_OP :=cp
#FP_FINAL_OP :=ln -nsf

export FP_FINAL_IN_V    := $(FP_PDN_OUT_V)
export FP_FINAL_IN_SDC  := $(FP_PDN_OUT_SDC)
export FP_FINAL_IN_DEF  := $(FP_PDN_OUT_DEF)
export FP_FINAL_OUT_V   := $(FP_RUN_DIR)/results/fp.final.v
export FP_FINAL_OUT_SDC := $(FP_RUN_DIR)/results/fp.final.sdc
export FP_FINAL_OUT_DEF := $(FP_RUN_DIR)/results/fp.final.def

fp.final: fp.pdn
	@## Finalize floorplanning.
	$(FP_FINAL_OP) $(FP_FINAL_IN_V)   $(FP_FINAL_OUT_V)
	$(FP_FINAL_OP) $(FP_FINAL_IN_SDC) $(FP_FINAL_OUT_SDC)
	$(FP_FINAL_OP) $(FP_FINAL_IN_DEF) $(FP_FINAL_OUT_DEF)
	touch $(BUILD_VPATH)/$@

#=======================================
# CLEAN
#=======================================

clean.fp: clean.fp.setup
	@## Alias to cleanup all floorplan steps.

clean.fp.setup: are_you_sure clean.fp.v2def
	@## Cleanup the fp.setup target.
	rm -rf $(FP_RUN_DIR)
	rm -f $(BUILD_VPATH)/$(subst clean.,,$@)

clean.fp.v2def: are_you_sure clean.fp.io
	@## Cleanup the fp.v2def target.
	rm -f $(FP_V2DEF_OUT_V)
	rm -f $(FP_V2DEF_OUT_SDC)
	rm -f $(FP_V2DEF_OUT_DEF)
	rm -f $(FP_RUN_DIR)/logs/$(subst clean.,,$@).log
	rm -f $(BUILD_VPATH)/$(subst clean.,,$@)

clean.fp.io: are_you_sure clean.fp.global
	@## Cleanup the fp.io target.
	rm -f $(FP_IO_OUT_V)
	rm -f $(FP_IO_OUT_SDC)
	rm -f $(FP_IO_OUT_DEF)
	rm -f $(FP_RUN_DIR)/logs/$(subst clean.,,$@).log
	rm -f $(BUILD_VPATH)/$(subst clean.,,$@)

clean.fp.global: are_you_sure clean.fp.macro
	@## Cleanup the fp.global target.
	rm -f $(FP_GLOBAL_OUT_V)
	rm -f $(FP_GLOBAL_OUT_SDC)
	rm -f $(FP_GLOBAL_OUT_DEF)
	rm -f $(FP_RUN_DIR)/logs/$(subst clean.,,$@).log
	rm -f $(BUILD_VPATH)/$(subst clean.,,$@)

clean.fp.macro: are_you_sure clean.fp.pdn
	@## Cleanup the fp.macro target.
	rm -f $(FP_MACRO_OUT_V)
	rm -f $(FP_MACRO_OUT_SDC)
	rm -f $(FP_MACRO_OUT_DEF)
	rm -f $(FP_RUN_DIR)/logs/$(subst clean.,,$@).log
	rm -f $(BUILD_VPATH)/$(subst clean.,,$@)

clean.fp.pdn: are_you_sure clean.fp.final
	@## Cleanup the fp.pdn target.
	rm -f $(FP_PDN_OUT_V)
	rm -f $(FP_PDN_OUT_SDC)
	rm -f $(FP_PDN_OUT_DEF)
	rm -f $(FP_RUN_DIR)/logs/$(subst clean.,,$@).log
	rm -f $(BUILD_VPATH)/$(subst clean.,,$@)

clean.fp.final: are_you_sure clean.place
	@## Cleanup the fp.final target.
	rm -f $(FP_FINAL_OUT_V)
	rm -f $(FP_FINAL_OUT_SDC)
	rm -f $(FP_FINAL_OUT_DEF)
	rm -f $(FP_RUN_DIR)/logs/$(subst clean.,,$@).log
	rm -f $(BUILD_VPATH)/$(subst clean.,,$@)

